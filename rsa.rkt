#lang racket
(require math/number-theory)
(define (make-rsa p q pass)
  (define public_key (cons (* p q) (make-e p q)))
  (define user_pass pass)
  (define (make-e p q)
  (- (* (- p 1) (- q 1)) 1))
  (define (encrypt num)
    (map (lambda (x)
           (modular-expt x (cdr public_key) (car public_key)))
         num))
  (define (decrypt password message)
    (if (eq? password user_pass)
        (map (lambda (x)
               (modular-expt x
                             (modular-inverse (cdr public_key)
                                                (* (- p 1) (- q 1)))
                             (car public_key)))
              message)
        "ERROR: Wrong Password"))
  (define (dispatch m . params)
    (cond ((eq? m 'encrypt) (encrypt params))
          ((eq? m 'decrypt) (decrypt params))))
  dispatch)